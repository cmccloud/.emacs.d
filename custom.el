;;; custom.el --- User custom-set settings. -*- lexical-binding: t -*-

;; Copyright (C) 2016-2018 Christopher McCloud

;; Author: Christopher McCloud <mccloud.christopher@gmail.com>

;; This file is not part of GNU Emacs

;;; Code: 
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ad-redefinition-action 'accept)
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   (vector "#657b83" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#fdf6e3"))
 '(ansi-term-color-vector
   [unspecified "#1B2229" "#ff6c6b" "#98be65" "#ECBE7B" "#51afef" "#c678dd" "#46D9FF" "#DFDFDF"] t)
 '(ag-highlight-search t t)
 '(ag-ignore-list '("archive-contents") t)
 '(ag-reuse-window t t)
 '(apropos-do-all t t)
 '(auto-save-default nil)
 '(auto-save-file-name-transforms
   '((".*" "/var/folders/f4/0p9hr1155ngckx9pjfsct6th0000gn/T/\\2" t)))
 '(avy-all-windows nil)
 '(avy-background t)
 '(avy-style 'at)
 '(background-color "#202020")
 '(background-mode dark)
 '(backup-directory-alist '(("." . "~/.emacs.d/cache/backups/")))
 '(bind-key-describe-special-forms t)
 '(blink-cursor-mode nil)
 '(blink-matching-paren nil)
 '(clojure-align-forms-automatically t)
 '(column-number-mode t)
 '(company-abort-manual-when-too-short nil)
 '(company-auto-complete-chars '(32 41 46))
 '(company-backends
   '(company-tern company-bbdb company-nxml company-css company-eclim company-clang company-xcode company-capf company-semantic company-elisp company-cmake
                  (company-dabbrev-code company-gtags company-etags company-keywords)
                  company-oddmuse company-files company-dabbrev))
 '(company-box-max-candidates 500)
 '(company-dabbrev-downcase nil)
 '(company-dabbrev-ignore-case nil)
 '(company-gtags-executable nil)
 '(company-idle-delay 0.2)
 '(company-minimum-prefix-length 2)
 '(company-require-match 'never)
 '(company-tooltip-align-annotations t)
 '(company-tooltip-limit 12)
 '(compilation-message-face 'default)
 '(compilation-scroll-output nil)
 '(confirm-kill-emacs 'yes-or-no-p)
 '(create-lockfiles nil)
 '(cursor-color "#cccccc")
 '(cursor-in-non-selected-windows nil)
 '(cursor-type t)
 '(custom-buffer-done-kill t)
 '(custom-enabled-themes nil)
 '(custom-file "/Users/Macnube/.emacs.d/custom.el")
 '(custom-safe-themes
   '("2a1b4531f353ec68f2afd51b396375ac2547c078d035f51242ba907ad8ca19da" "2af26301bded15f5f9111d3a161b6bfb3f4b93ec34ffa95e42815396da9cb560" "e91ca866d6cbb79786e314e0466f4f1b8892b72e77ed702e53bf7565e0dfd469" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "f03e2076bb6ba9f1178ef83f54b395c48c70dd160a34e37c80c876c925701b5a" "db2ecce0600e3a5453532a89fc19b139664b4a3e7cbefce3aaf42b6d9b1d6214" "e1e94aaecf0d3ed7bc6cdcebb02aafbf2a0236e711f4a78783337f8b0d32c842" "413a1712dfb0929cca961863482094057217bcb13475b4b813b35ea81da8e2e6" "5fea012429d3e720b7adc598295157befc00af4f3d433255087b407bf3a9ab71" "c31b688a76507c3b0458ae9d3848e3196346aeeadde457df5f828c7dc3e59fe3" "b40f4579788b1e990c553c163a4d294ac9d5a2a4615b1d1a757812ea427f8d50" "2f5dd0ac7dffdc0acf0aa15c9b7a5b1f86c37b9e11800325160b89c1b8a6fefe" "afbb40954f67924d3153f27b6d3399df221b2050f2a72eb2cfa8d29ca783c5a8" "4cf3221feff536e2b3385209e9b9dc4c2e0818a69a1cdb4b522756bcdf4e00a4" default))
 '(display-line-numbers-current-absolute t)
 '(display-line-numbers-type t t)
 '(doom-themes-enable-bold nil)
 '(doom-themes-enable-italic nil)
 '(dumb-jump-selector 'helm t)
 '(echo-keystrokes 0.2)
 '(ediff-split-window-function 'split-window-horizontally)
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 '(emmet-indentation 2)
 '(ensime-sem-high-faces
   '((var :foreground "#9876aa" :underline
          (:style wave :color "yellow"))
     (val :foreground "#9876aa")
     (varField :slant italic)
     (valField :foreground "#9876aa" :slant italic)
     (functionCall :foreground "#a9b7c6")
     (implicitConversion :underline
                         (:color "#808080"))
     (implicitParams :underline
                     (:color "#808080"))
     (operator :foreground "#cc7832")
     (param :foreground "#a9b7c6")
     (class :foreground "#4e807d")
     (trait :foreground "#4e807d" :slant italic)
     (object :foreground "#6897bb" :slant italic)
     (package :foreground "#cc7832")
     (deprecated :strike-through "#a9b7c6")))
 '(exec-path
   '("/usr/local/bin/" "/usr/local/sbin/" "/usr/local/opt/nvm/versions/node/v6.2.0/bin/" "/usr/local/bin/" "/usr/local/sbin/" "/usr/bin/" "/bin/" "/usr/sbin/" "/sbin/" "/opt/X11/bin/" "/usr/local/MacGPG2/bin/" "/usr/local/opt/nvm/" "/Library/TeX/texbin/" "/usr/local/share/npm/bin/" "/usr/local/otp/nvm/" "/usr/local/opt/coreutils/libexec/gnubin/" "/usr/local/share/npm/bin/" "/usr/local/otp/nvm/" "/usr/local/opt/coreutils/libexec/gnubin/" "/usr/local/Cellar/emacs/HEAD-8f2a815/libexec/emacs/27.0.50/x86_64-apple-darwin16.7.0/"))
 '(explicit-shell-file-name "/bin/zsh")
 '(fancy-splash-image nil)
 '(fci-rule-color "#eee8d5")
 '(ffap-machine-p-known 'reject)
 '(ffap-machine-p-local 'reject)
 '(ffap-machine-p-unknown 'reject)
 '(fit-window-to-buffer-horizontally t)
 '(flycheck-highlighting-mode 'sexps)
 '(foreground-color "#cccccc")
 '(frame-resize-pixelwise t)
 '(fringe-mode 6 nil (fringe))
 '(git-gutter:added-sign " ")
 '(git-gutter:ask-p nil)
 '(git-gutter:deleted-sign " ")
 '(git-gutter:modified-sign " ")
 '(global-hl-line-sticky-flag nil)
 '(global-visual-line-mode t)
 '(golden-ratio-auto-scale t)
 '(golden-ratio-exclude-buffer-names '("*Helm Swoop*" "*Helm Multi Swoop*"))
 '(golden-ratio-exclude-modes '("magit-popup-mode" "magit-status-mode" "ediff-mode"))
 '(golden-ratio-extra-commands
   '(windmove-left windmove-right windmove-down windmove-up select-window-1 select-window-2 select-window-3 select-window-4 select-window-5))
 '(haskell-completing-read-function 'helm--completing-read-default)
 '(haskell-tags-on-save t)
 '(helm-M-x-fuzzy-match t)
 '(helm-ag-always-set-extra-option t)
 '(helm-autoresize-max-height 30)
 '(helm-boring-buffer-regexp-list
   '("\\` " "\\*helm" "\\*helm-mode" "\\*Echo Area" "\\*Minibuf" "\\magit" "\\*Diff*" "\\*lispy-goto*" "\\*Backtrace*"))
 '(helm-buffer-max-length nil)
 '(helm-buffer-skip-remote-checking t)
 '(helm-candidate-number-limit 100)
 '(helm-dash-browser-func 'browse-url)
 '(helm-dash-docsets-path "/Users/Macnube/Library/Application Support/Dash/DocSets/")
 '(helm-descbinds-window-style 'split-window t)
 '(helm-display-header-line nil)
 '(helm-ff-tramp-not-fancy t)
 '(helm-grep-ag-command
   "rg -M 256 --color=always --smart-case --no-heading --line-number %s %s %s")
 '(helm-locate-command "mdfind -name %s %s")
 '(helm-locate-fuzzy-match nil)
 '(helm-mini-default-sources
   '(helm-source-buffers-list helm-source-recentf helm-source-buffer-not-found))
 '(helm-mode t)
 '(helm-split-window-inside-p t)
 '(helm-swoop-pre-input-function '#[0 "\300\207" [""] 1 ""] t)
 '(helm-swoop-speed-or-color t t)
 '(helm-swoop-split-with-multiple-windows t t)
 '(help-window-select t)
 '(helpful-max-buffers 1 t)
 '(highlight-changes-colors '("#FD5FF0" "#AE81FF"))
 '(highlight-nonselected-windows nil)
 '(highlight-tail-colors
   '(("#49483E" . 0)
     ("#679A01" . 20)
     ("#4BBEAE" . 30)
     ("#1DB4D0" . 50)
     ("#9A8F21" . 60)
     ("#A75B00" . 70)
     ("#F309DF" . 85)
     ("#49483E" . 100)))
 '(history-length 1000)
 '(hl-line-sticky-flag nil)
 '(hl-paren-background-colors '("#2492db" "#95a5a6" nil))
 '(hl-paren-colors '("#B9F" "#B8D" "#B7B" "#B69" "#B57" "#B45" "#B33" "#B11"))
 '(hl-sexp-background-color "#efebe9")
 '(indent-tabs-mode nil)
 '(indicate-buffer-boundaries nil)
 '(indicate-empty-lines nil)
 '(inhibit-startup-message t)
 '(inhibit-startup-screen t)
 '(initial-frame-alist '((top . 30) (left . 50) (width . 90) (height . 58)))
 '(initial-major-mode 'fundamental-mode)
 '(initial-scratch-message nil)
 '(jdee-db-active-breakpoint-face-colors ("#1B2229" . "#51afef"))
 '(jdee-db-requested-breakpoint-face-colors ("#1B2229" . "#98be65"))
 '(jdee-db-spec-breakpoint-face-colors ("#1B2229" . "#3B3F46"))
 '(jit-lock-defer-time nil)
 '(jit-lock-stealth-nice 0.1)
 '(jit-lock-stealth-time 0.2)
 '(jit-lock-stealth-verbose nil)
 '(js-expr-indent-offset 0)
 '(js-indent-level 2)
 '(js2-include-node-externs t)
 '(large-file-warning-threshold 200000000)
 '(leader-mode t t)
 '(leader/leader "M-m")
 '(lispy-avy-style-char 'at)
 '(lispy-avy-style-symbol 'at)
 '(lispy-compat '(edebug cider))
 '(lispy-completion-method 'helm)
 '(lispy-eval-display-style 'overlay)
 '(lispy-no-permanent-semantic t)
 '(lispy-occur-backend 'helm)
 '(magit-diff-use-overlays nil)
 '(magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1 t)
 '(make-backup-files nil)
 '(markdown-command "marked")
 '(markdown-command-needs-filename t)
 '(markdown-gfm-additional-languages '("scheme" "javascript"))
 '(mouse-wheel-progressive-speed t)
 '(mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control))))
 '(nrepl-message-colors
   '("#CC9393" "#DFAF8F" "#F0DFAF" "#7F9F7F" "#BFEBBF" "#93E0E3" "#94BFF3" "#DC8CC3"))
 '(ns-alternate-modifier 'super)
 '(ns-command-modifier 'meta)
 '(ns-option-modifier 'super)
 '(ns-pop-up-frames 'fresh)
 '(ns-use-native-fullscreen nil)
 '(org-agenda-files '("~/.emacs.d/emacs-todo.org"))
 '(org-ellipsis " ï„‡ ")
 '(package-archive-priorities
   '(("melpa-stable" . 10)
     ("melpa" . 5)
     ("gnu" . 0)
     ("marmalade" . -5)))
 '(package-archives
   '(("melpa" . "https://melpa.org/packages/")
     ("melpa-stable" . "https://stable.melpa.org/packages/")
     ("org" . "http://orgmode.org/elpa/")
     ("gnu" . "http://elpa.gnu.org/packages/")))
 '(package-menu-hide-low-priority nil)
 '(package-quickstart t)
 '(package-selected-packages
   '(slime counsel-projectile ivy counsel company-box visual-regexp-steroids visual-regexp ag rg helm-xref stripe-buffer hlinum eldoc-eval company-quickhelp dumb-jump git-commit lispy use-package persp-mode helm helm-ag helm-core helm-descbinds helm-describe-modes helm-projectile helm-swoop helm-themes hydra git-gutter-fringe git-gutter spacemacs-theme page-break-lines all-the-icons writeroom-mode magit-gh-pulls company-web rainbow-mode company-tern clojure-mode paradox pdf-tools expand-region web-mode emmet-mode gist f request-deferred deferred request shm intero haskell-mode gh-md markdown-mode vmd-mode eyebrowse golden-ratio flycheck slime-company js-doc racket-mode geiser projectile ggtags smooth-scrolling elisp-slime-nav window-numbering smartparens shackle magit js2-mode exec-path-from-shell cider avy))
 '(package-user-dir "~/.emacs.d/elpa")
 '(paradox-column-width-package 30)
 '(paradox-execute-asynchronously t)
 '(paradox-github-token t)
 '(paradox-lines-per-entry 1)
 '(paradox-use-homepage-buttons nil)
 '(pdf-view-display-size 'fit-height)
 '(pdf-view-midnight-colors '("#DCDCCC" . "#383838"))
 '(pdf-view-use-imagemagick t)
 '(pdf-view-use-scaling t)
 '(persp-add-buffer-on-after-change-major-mode t t)
 '(persp-auto-resume-time 0.1 t)
 '(persp-auto-save-opt 2 t)
 '(persp-autokill-buffer-on-remove nil t)
 '(persp-init-frame-behaviour 'persp-ignore-wconf-once t)
 '(persp-keymap-prefix "l" t)
 '(persp-nil-name "Home" t)
 '(persp-reset-windows-on-nil-window-conf t t)
 '(persp-restrict-buffers-to-if-foreign-buffer nil t)
 '(persp-save-dir "/Users/Macnube/.emacs.d/cache/persp-confs/" t)
 '(persp-set-last-persp-for-new-frames t t)
 '(persp-switch-to-added-buffer nil t)
 '(persp-switch-wrap t t)
 '(pos-tip-background-color "#A6E22E" t)
 '(pos-tip-foreground-color "#272822" t)
 '(projectile-cache-file "/Users/Macnube/.emacs.d/cache/projectile.cache")
 '(projectile-completion-system 'helm)
 '(projectile-enable-caching t)
 '(projectile-known-projects-file "/Users/Macnube/.emacs.d/cache/projectile-bookmarks.eld")
 '(projectile-sort-order 'recentf)
 '(projectile-switch-project-action 'helm-projectile)
 '(rainbow-identifiers-choose-face-function 'rainbow-identifiers-cie-l*a*b*-choose-face)
 '(rainbow-identifiers-cie-l*a*b*-color-count 1024)
 '(rainbow-identifiers-cie-l*a*b*-lightness 80)
 '(rainbow-identifiers-cie-l*a*b*-saturation 25)
 '(recentf-auto-cleanup 'never)
 '(recentf-exclude '("~/.emacs.d/cache/.*"))
 '(recentf-max-menu-items 10)
 '(recentf-max-saved-items 1000)
 '(recentf-save-file "~/.emacs.d/cache/recentf")
 '(rg-group-result t)
 '(ring-bell-function 'ignore)
 '(safe-local-variable-values
   '((eval font-lock-add-keywords nil
           `((,(concat "("
                       (regexp-opt
                        '("sp-do-move-op" "sp-do-move-cl" "sp-do-put-op" "sp-do-put-cl" "sp-do-del-op" "sp-do-del-cl")
                        t)
                       "\\_>")
              1 'font-lock-variable-name-face)))
     (eval progn
           (pp-buffer)
           (indent-buffer))))
 '(save-interprogram-paste-before-kill t)
 '(scroll-bar-mode nil)
 '(scroll-conservatively 101)
 '(scroll-margin 5)
 '(scroll-preserve-screen-position t)
 '(select-active-regions 'only)
 '(semantic-edits-verbose-flag t t)
 '(semantic-idle-scheduler-idle-time 10 t)
 '(semantic-stickyfunc-indent-string " ")
 '(semanticdb-default-save-directory "~/.emacs.d/cache/semanticdb" t)
 '(shackle-mode t)
 '(shackle-select-reused-windows t)
 '(shell-file-name "/bin/zsh")
 '(show-paren-delay 0.05)
 '(show-paren-mode t)
 '(slime-kill-without-query-p t)
 '(sml/active-background-color "#34495e")
 '(sml/active-foreground-color "#ecf0f1")
 '(sml/inactive-background-color "#dfe4ea")
 '(sml/inactive-foreground-color "#34495e")
 '(sp-echo-match-when-invisible nil)
 '(sp-show-pair-delay 0.01)
 '(sp-show-pair-from-inside nil)
 '(standard-indent 2)
 '(tab-width 8)
 '(tool-bar-mode nil)
 '(tramp-auto-save-directory "~/.emacs.d/cache/auto-saves/" nil (tramp))
 '(tramp-backup-directory-alist '((".*" . "~/.emacs.d/cache/backups/")) nil (tramp))
 '(tramp-persistency-file-name "/Users/Macnube/.emacs.d/cache/tramp" nil (tramp))
 '(use-dialog-box nil)
 '(use-package-always-defer t t)
 '(use-package-minimum-reported-time 0.05)
 '(use-package-verbose nil t)
 '(user-full-name "Christopher McCloud")
 '(user-mail-address "mccloud.christopher@gmail.com")
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   '((20 . "#dc322f")
     (40 . "#cb4b16")
     (60 . "#b58900")
     (80 . "#859900")
     (100 . "#2aa198")
     (120 . "#268bd2")
     (140 . "#d33682")
     (160 . "#6c71c4")
     (180 . "#dc322f")
     (200 . "#cb4b16")
     (220 . "#b58900")
     (240 . "#859900")
     (260 . "#2aa198")
     (280 . "#268bd2")
     (300 . "#d33682")
     (320 . "#6c71c4")
     (340 . "#dc322f")
     (360 . "#cb4b16")))
 '(vc-annotate-very-old-color nil)
 '(visible-bell nil)
 '(visible-cursor nil)
 '(vr/default-replace-preview t t)
 '(weechat-color-list
   (unspecified "#272822" "#49483E" "#F70057" "#F92672" "#86C30D" "#A6E22E" "#BEB244" "#E6DB74" "#40CAE4" "#66D9EF" "#FB35EA" "#FD5FF0" "#74DBCD" "#A1EFE4" "#F8F8F2" "#F8F8F0"))
 '(which-key-mode t)
 '(which-key-sort-order 'which-key-prefix-then-key-order-reverse)
 '(window-divider-default-bottom-width 1)
 '(window-divider-default-places 'right-only)
 '(window-divider-default-right-width 1)
 '(writeroom-global-effects
   '(writeroom-set-alpha writeroom-set-menu-bar-lines writeroom-set-tool-bar-lines writeroom-set-vertical-scroll-bars writeroom-set-bottom-divider-width)))


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :slant normal :weight ultra-light :height 120 :width normal :foundry "nil" :family "Input Mono"))))
 '(cursor ((t (:background "SkyBlue3" :foreground "gray99"))))
 '(git-gutter-fr:modified ((t (:foreground "keyboardFocusIndicatorColor"))))
 '(git-gutter:added ((t (:background "PaleGreen2" :foreground "#859900" :weight bold))))
 '(git-gutter:deleted ((t (:background "IndianRed2" :weight bold))))
 '(git-gutter:modified ((t (:background "RoyalBlue2" :weight bold))))
 '(helm-candidate-number ((t nil)))
 '(helm-visible-mark ((t (:background "steel blue" :foreground "black"))))
 '(hl-line ((t (:inherit helm-selection))))
 '(region ((t (:background "slate grey" :foreground "black"))))
 '(show-paren-match ((t nil)))
 '(which-key-group-description-face ((t (:foreground "#a9a1e1" :weight semi-bold)))))

;;; custom.el ends here
