;;; custom.el --- User custom-set settings. -*- lexical-binding: t -*-

;; Copyright (C) 2016-2018 Christopher McCloud

;; Author: Christopher McCloud <mccloud.christopher@gmail.com>

;; This file is not part of GNU Emacs

;;; Code: 
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ad-redefinition-action 'accept)
 '(ag-highlight-search t t nil "Customized with use-package ag")
 '(ag-ignore-list '("archive-contents") t nil "Customized with use-package ag")
 '(ag-reuse-window t t nil "Customized with use-package ag")
 '(all-the-icons-scale-factor 1 t nil "Customized with use-package all-the-icons")
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   ["#0a0814" "#f2241f" "#67b11d" "#b1951d" "#4f97d7" "#a31db1" "#28def0" "#b2b2b2"])
 '(apropos-do-all t t nil "Customized with use-package cus-edit")
 '(auth-source-cache-expiry 10800 nil nil "Customized with use-package auth-source")
 '(auth-sources '(macos-keychain-internet macos-keychain-generic) nil nil "Customized with use-package auth-source")
 '(auto-revert-verbose nil nil nil "Customized with use-package autorevert")
 '(auto-save-default nil)
 '(auto-save-list-file-prefix "/Users/Macnube/.emacs.d/cache/auto-save-list/.saves-")
 '(avy-all-windows nil nil nil "Customized with use-package avy")
 '(avy-background t nil nil "Customized with use-package avy")
 '(avy-style 'at nil nil "Customized with use-package avy")
 '(aw-keys '(49 50 51 52 53 54 55 56 57 48) t nil "Customized with use-package ace-window")
 '(background-color "#202020")
 '(background-mode dark)
 '(backup-directory-alist '(("." . "~/.emacs.d/cache/backups/")))
 '(bind-key-describe-special-forms t nil nil "Customized with use-package bind-key")
 '(blink-cursor-mode nil)
 '(blink-matching-paren nil nil nil "Customized with use-package simple")
 '(clojure-align-forms-automatically t)
 '(column-number-mode t)
 '(company-abort-manual-when-too-short nil)
 '(company-auto-complete-chars '(32 41 46))
 '(company-box-max-candidates 500 t nil "Customized with use-package company-box")
 '(company-dabbrev-downcase nil)
 '(company-dabbrev-ignore-case nil)
 '(company-dabbrev-ignore-invisible t)
 '(company-dabbrev-other-buffers t)
 '(company-gtags-executable nil)
 '(company-idle-delay 0.2 nil nil "Customized with use-package company")
 '(company-minimum-prefix-length 2)
 '(company-quickhelp-color-background "#4F4F4F")
 '(company-quickhelp-color-foreground "#DCDCCC")
 '(company-require-match 'never nil nil "Customized with use-package company")
 '(company-tooltip-align-annotations t nil nil "Customized with use-package company")
 '(company-tooltip-limit 12 nil nil "Customized with use-package company")
 '(compilation-message-face 'default)
 '(compilation-scroll-output nil nil nil "Customized with use-package cus-edit")
 '(completion-ignored-extensions
   '(".DS_Store" ".o" "~" ".bin" ".lbin" ".so" ".a" ".ln" ".blg" ".bbl" ".elc" ".lof" ".glo" ".idx" ".lot" ".svn/" ".hg/" ".git/" ".bzr/" "CVS/" "_darcs/" "_MTN/" ".fmt" ".tfm" ".class" ".fas" ".lib" ".mem" ".x86f" ".sparcf" ".dfsl" ".pfsl" ".d64fsl" ".p64fsl" ".lx64fsl" ".lx32fsl" ".dx64fsl" ".dx32fsl" ".fx64fsl" ".fx32fsl" ".sx64fsl" ".sx32fsl" ".wx64fsl" ".wx32fsl" ".fasl" ".ufsl" ".fsl" ".dxl" ".lo" ".la" ".gmo" ".mo" ".toc" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs" ".pyc" ".pyo"))
 '(confirm-kill-emacs 'y-or-n-p)
 '(create-lockfiles nil)
 '(cua-global-mark-cursor-color "#2aa198")
 '(cua-normal-cursor-color "#839496")
 '(cua-overwrite-cursor-color "#b58900")
 '(cua-read-only-cursor-color "#859900")
 '(cursor-color "#cccccc")
 '(cursor-in-non-selected-windows nil)
 '(cursor-type t)
 '(custom-buffer-done-kill t)
 '(custom-enabled-themes nil)
 '(custom-file "/Users/Macnube/.emacs.d/custom.el")
 '(custom-safe-themes t)
 '(delete-by-moving-to-trash t)
 '(dimmer-exclusion-predicates '(helm--alive-p window-minibuffer-p) t nil "Customized with use-package dimmer")
 '(dimmer-exclusion-regexp-list
   '("^\\*[h|H]elm.*\\*" "^\\*Minibuf-[0-9]+\\*" "^.\\*which-key\\*$") t nil "Customized with use-package dimmer")
 '(dimmer-fraction 0.4 t nil "Customized with use-package dimmer")
 '(display-line-numbers-current-absolute t)
 '(display-line-numbers-type t t)
 '(doc-view-resolution 200 t)
 '(doom-city-lights-brighter-comments t t nil "Customized with use-package doom-themes")
 '(doom-city-lights-comment-bg t t nil "Customized with use-package doom-themes")
 '(doom-dracula-brighter-comments t t nil "Customized with use-package doom-themes")
 '(doom-dracula-comment-bg t t nil "Customized with use-package doom-themes")
 '(doom-molokai-brighter-comments t t nil "Customized with use-package doom-themes")
 '(doom-nord-brighter-comments t t nil "Customized with use-package doom-themes")
 '(doom-nord-comment-bg t t nil "Customized with use-package doom-themes")
 '(doom-nord-light-brighter-comments t t nil "Customized with use-package doom-themes")
 '(doom-nord-light-comment-bg t t nil "Customized with use-package doom-themes")
 '(doom-one-brighter-comments t nil nil "Customized with use-package doom-themes")
 '(doom-one-comment-bg t nil nil "Customized with use-package doom-themes")
 '(doom-one-light-brighter-comments t t nil "Customized with use-package doom-themes")
 '(doom-one-light-comment-bg t t nil "Customized with use-package doom-themes")
 '(doom-opera-brighter-comments t t nil "Customized with use-package doom-themes")
 '(doom-opera-comment-bg t t nil "Customized with use-package doom-themes")
 '(doom-opera-light-brighter-comments t t nil "Customized with use-package doom-themes")
 '(doom-opera-light-comment-bg t t nil "Customized with use-package doom-themes")
 '(doom-peacock-brighter-comments t t nil "Customized with use-package doom-themes")
 '(doom-peacock-comment-bg t t nil "Customized with use-package doom-themes")
 '(doom-solarized-light-brighter-comments t t nil "Customized with use-package doom-themes")
 '(doom-solarized-light-comment-bg t t nil "Customized with use-package doom-themes")
 '(doom-spacegrey-brighter-comments t t nil "Customized with use-package doom-themes")
 '(doom-spacegrey-comment-bg t t nil "Customized with use-package doom-themes")
 '(doom-themes-enable-bold t nil nil "Customized with use-package doom-themes")
 '(doom-themes-enable-italic nil nil nil "Customized with use-package doom-themes")
 '(doom-vibrant-brighter-comments t t nil "Customized with use-package doom-themes")
 '(doom-vibrant-comment-bg t t nil "Customized with use-package doom-themes")
 '(dumb-jump-default-project "~/emacs.d/" t)
 '(dumb-jump-selector 'helm t nil "Customized with use-package dumb-jump")
 '(echo-keystrokes 0.2)
 '(ediff-keep-variants t t nil "Customized with use-package ediff")
 '(ediff-split-window-function 'split-window-horizontally t nil "Customized with use-package ediff")
 '(ediff-window-setup-function 'ediff-setup-windows-plain t nil "Customized with use-package ediff")
 '(emmet-indentation 2)
 '(enable-local-variables :safe)
 '(enable-recursive-minibuffers t)
 '(eshell-directory-name "/Users/Macnube/.emacs.d/cache/eshell/" t nil "Customized with use-package eshell")
 '(exec-path
   '("/usr/local/opt/coreutils/libexec/gnubin/" "/usr/local/bin/" "/usr/local/sbin/" "/usr/bin/" "/bin/" "/usr/sbin/" "/sbin/" "/opt/X11/bin/" "/usr/local/MacGPG2/bin/" "/usr/local/opt/nvm/" "/Library/TeX/texbin/" "/usr/local/opt/coreutils/libexec/gnubin/" "/Users/Macnube/.nvm/versions/node/v8.11.2/bin/" "/usr/local/opt/nvm/versions/node/v8.11.2/bin/" "/usr/local/share/npm/bin/" "/usr/local/otp/nvm/" "/usr/local/Cellar/emacs/HEAD-44ad4a1_1/libexec/emacs/27.0.50/x86_64-apple-darwin16.7.0/"))
 '(explicit-shell-file-name "/bin/zsh")
 '(eyebrowse-new-workspace t t nil "Customized with use-package eyebrowse")
 '(fancy-splash-image nil)
 '(fci-rule-color "#eee8d5")
 '(ffap-machine-p-known 'reject)
 '(ffap-machine-p-local 'reject)
 '(ffap-machine-p-unknown 'reject)
 '(fit-window-to-buffer-horizontally t nil nil "Customized with use-package window")
 '(flycheck-check-syntax-automatically '(save mode-enabled) t nil "Customized with use-package flycheck")
 '(flycheck-error-list-minimum-level 'error t nil "Customized with use-package flycheck")
 '(flycheck-highlighting-mode 'sexps)
 '(flycheck-indication-mode 'right-fringe t nil "Customized with use-package flycheck")
 '(foreground-color "#cccccc")
 '(frame-resize-pixelwise t)
 '(fringe-mode 6 nil (fringe))
 '(git-commit-setup-hook
   '(git-commit-save-message git-commit-setup-changelog-support git-commit-turn-on-auto-fill git-commit-turn-on-flyspell git-commit-propertize-diff with-editor-usage-message))
 '(git-gutter:added-sign " ")
 '(git-gutter:ask-p nil)
 '(git-gutter:deleted-sign " ")
 '(git-gutter:modified-sign " ")
 '(global-auto-revert-mode t)
 '(global-hl-line-sticky-flag nil nil nil "Customized with use-package hl-line")
 '(golden-ratio-auto-scale t t nil "Customized with use-package golden-ratio")
 '(golden-ratio-exclude-buffer-names '("*tide-documentation*") t nil "Customized with use-package golden-ratio")
 '(haskell-completing-read-function 'helm--completing-read-default)
 '(haskell-tags-on-save t)
 '(helm-M-x-fuzzy-match nil t nil "Customized with use-package helm-command")
 '(helm-adaptive-history-file "~/.emacs.d/cache/helm-adaptive-history" nil nil "Customized with use-package helm-adaptive")
 '(helm-ag-always-set-extra-option t)
 '(helm-boring-buffer-regexp-list
   '("\\` " "\\*helm" "\\*helm-mode" "\\*Echo Area" "^magit.*:" "\\*Minibuf" "\\*Diff*" "\\*lispy-goto*" "\\*Backtrace*") nil nil "Customized with use-package helm-buffers")
 '(helm-buffer-max-length nil nil nil "Customized with use-package helm-buffers")
 '(helm-buffer-skip-remote-checking t nil nil "Customized with use-package helm-buffers")
 '(helm-candidate-number-limit 100 nil nil "Customized with use-package helm")
 '(helm-completing-read-handlers-alist
   '((xref-find-definitions . helm-completing-read-default-find-tag)
     (Info-menu . helm-completing-read-default-find-tag)
     (describe-function . helm-completing-read-symbols)
     (describe-variable . helm-completing-read-symbols)
     (describe-symbol . helm-completing-read-symbols)
     (debug-on-entry . helm-completing-read-symbols)
     (find-function . helm-completing-read-symbols)
     (disassemble . helm-completing-read-symbols)
     (trace-function . helm-completing-read-symbols)
     (trace-function-foreground . helm-completing-read-symbols)
     (trace-function-background . helm-completing-read-symbols)
     (find-tag . helm-completing-read-default-find-tag)
     (org-capture . helm-org-completing-read-tags)
     (org-set-tags . helm-org-completing-read-tags)
     (ffap-alternate-file)
     (tmm-menubar)
     (find-file)
     (find-file-at-point . helm-completing-read-sync-default-handler)
     (ffap . helm-completing-read-sync-default-handler)
     (execute-extended-command)
     (dired-do-rename . helm-read-file-name-handler-1)
     (dired-do-copy . helm-read-file-name-handler-1)
     (dired-do-symlink . helm-read-file-name-handler-1)
     (dired-do-relsymlink . helm-read-file-name-handler-1)
     (dired-do-hardlink . helm-read-file-name-handler-1)) nil nil "Customized with use-package helm-mode")
 '(helm-completion-in-region-fuzzy-match t nil nil "Customized with use-package helm-mode")
 '(helm-dash-browser-func 'browse-url nil nil "Customized with use-package helm-dash")
 '(helm-dash-docsets-path "/Users/Macnube/Library/Application Support/Dash/DocSets/")
 '(helm-descbinds-window-style 'split-window t nil "Customized with use-package helm-descbinds")
 '(helm-display-header-line nil nil nil "Customized with use-package helm")
 '(helm-ff-auto-update-initial-value nil nil nil "Customized with use-package helm-files")
 '(helm-follow-mode-persistent t nil nil "Customized with use-package helm")
 '(helm-grep-ag-command
   "ag --line-numbers -S -W 256 --hidden --nocolor --nogroup -z -U %s %s %s" nil nil "Customized with use-package helm-grep")
 '(helm-grep-ag-pipe-cmd-switches '("--nocolor"))
 '(helm-grep-file-path-style 'basename)
 '(helm-imenu-delimiter ": " nil nil "Customized with use-package helm-imenu")
 '(helm-imenu-fuzzy-match nil nil nil "Customized with use-package helm-imenu")
 '(helm-locate-command "mdfind -name %s %s")
 '(helm-locate-fuzzy-match nil)
 '(helm-locate-library-fuzzy-match nil t nil "Customized with use-package helm-elisp")
 '(helm-ls-git-status-command 'magit-status-internal t nil "Customized with use-package helm-ls-git")
 '(helm-man-or-woman-function 'Man-getpage-in-background t nil "Customized with use-package helm-man")
 '(helm-mini-default-sources
   '(helm-source-buffers-list helm-source-recentf helm-source-buffer-not-found) nil nil "Customized with use-package helm-buffers")
 '(helm-moccur-always-search-in-current t nil nil "Customized with use-package helm-regexp")
 '(helm-moccur-auto-update-on-resume 'noask nil nil "Customized with use-package helm-regexp")
 '(helm-moccur-show-buffer-fontification nil nil nil "Customized with use-package helm-regexp")
 '(helm-moccur-use-ioccur-style-keys nil nil nil "Customized with use-package helm-regexp")
 '(helm-rg-default-directory 'default t)
 '(helm-semantic-display-style nil t nil "Customized with use-package helm-semantic")
 '(helm-source-names-using-follow nil)
 '(helm-split-window-inside-p t nil nil "Customized with use-package helm")
 '(helm-window-prefer-horizontal-split t nil nil "Customized with use-package helm-utils")
 '(help-window-select t)
 '(highlight-changes-colors '("#FD5FF0" "#AE81FF"))
 '(highlight-nonselected-windows nil)
 '(highlight-symbol-colors
   (--map
    (solarized-color-blend it "#002b36" 0.25)
    '("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2")))
 '(highlight-symbol-foreground-color "#93a1a1")
 '(highlight-tail-colors
   '(("#49483E" . 0)
     ("#679A01" . 20)
     ("#4BBEAE" . 30)
     ("#1DB4D0" . 50)
     ("#9A8F21" . 60)
     ("#A75B00" . 70)
     ("#F309DF" . 85)
     ("#49483E" . 100)))
 '(history-length 1000 nil nil "Customized with use-package cus-edit")
 '(hl-bg-colors
   '("#7B6000" "#8B2C02" "#990A1B" "#93115C" "#3F4D91" "#00629D" "#00736F" "#546E00"))
 '(hl-fg-colors
   '("#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36"))
 '(hl-line-sticky-flag nil nil nil "Customized with use-package hl-line")
 '(hl-paren-background-colors '("#2492db" "#95a5a6" nil))
 '(hl-paren-colors '("#B9F" "#B8D" "#B7B" "#B69" "#B57" "#B45" "#B33" "#B11"))
 '(hl-sexp-background-color "#efebe9")
 '(indent-tabs-mode nil)
 '(indicate-buffer-boundaries nil)
 '(indicate-empty-lines nil)
 '(inhibit-startup-message t)
 '(inhibit-startup-screen t)
 '(initial-frame-alist '((top . 75) (left . 25) (width . 90) (height . 60)))
 '(initial-major-mode 'text-mode)
 '(initial-scratch-message nil)
 '(jdee-db-active-breakpoint-face-colors ("#1B2229" . "#51afef"))
 '(jdee-db-requested-breakpoint-face-colors ("#1B2229" . "#98be65"))
 '(jdee-db-spec-breakpoint-face-colors ("#1B2229" . "#3B3F46"))
 '(jit-lock-defer-time nil)
 '(jit-lock-stealth-nice 0.1)
 '(jit-lock-stealth-time 0.2)
 '(jit-lock-stealth-verbose nil)
 '(js-chain-indent t t nil "Customized with use-package js")
 '(js-expr-indent-offset 0)
 '(js-flat-functions t t nil "Customized with use-package js")
 '(js-indent-align-list-continuation t t nil "Customized with use-package js")
 '(js-indent-level 2)
 '(js2-include-node-externs t)
 '(js2-missing-semi-one-line-override t t nil "Customized with use-package js2-mode")
 '(js2-strict-missing-semi-warning nil t nil "Customized with use-package js2-mode")
 '(large-file-warning-threshold 200000000)
 '(lispy-avy-style-char 'at nil nil "Customized with use-package lispy")
 '(lispy-avy-style-symbol 'at nil nil "Customized with use-package lispy")
 '(lispy-compat '(edebug cider) nil nil "Customized with use-package lispy")
 '(lispy-completion-method 'helm nil nil "Customized with use-package lispy")
 '(lispy-eval-display-style 'overlay nil nil "Customized with use-package lispy")
 '(lispy-no-permanent-semantic t nil nil "Customized with use-package lispy")
 '(lispy-occur-backend 'helm nil nil "Customized with use-package lispy")
 '(lispy-safe-copy t nil nil "Customized with use-package lispy")
 '(lispy-safe-delete t nil nil "Customized with use-package lispy")
 '(lispy-safe-paste t nil nil "Customized with use-package lispy")
 '(load-prefer-newer t)
 '(magit-diff-use-overlays nil)
 '(magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1 nil nil "Customized with use-package magit")
 '(magit-ediff-dwim-show-on-hunks nil t nil "Customized with use-package magit")
 '(magit-process-popup-time 5 nil nil "Customized with use-package magit")
 '(magit-repository-directories
   '(("/Users/Macnube/Repos" . 1)
     ("/Users/Macnube/.emacs.d" . 1)
     ("/Users/Macnube/.emacs.d/site-lisp" . 1)
     ("/usr/local/Cellar/emacs/" . 1)) nil nil "Customized with use-package magit")
 '(magithub-clone-default-directory "/Users/Macnube/Repos/" t nil "Customized with use-package magithub")
 '(magithub-dashboard-show-read-notifications nil t nil "Customized with use-package magithub")
 '(magithub-datetime-format "%A %B %e%l:%M%p %Y" t nil "Customized with use-package magithub")
 '(magithub-dir "~/.emacs.d/cache/magithub" t nil "Customized with use-package magithub")
 '(magithub-preferred-remote-method 'clone_url t nil "Customized with use-package magithub")
 '(make-backup-files nil)
 '(markdown-command "marked")
 '(markdown-command-needs-filename t)
 '(markdown-gfm-additional-languages '("scheme" "javascript"))
 '(mouse-wheel-progressive-speed nil)
 '(mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control))))
 '(nrepl-message-colors
   '("#CC9393" "#DFAF8F" "#F0DFAF" "#7F9F7F" "#BFEBBF" "#93E0E3" "#94BFF3" "#DC8CC3"))
 '(ns-alternate-modifier 'super)
 '(ns-command-modifier 'meta)
 '(ns-option-modifier 'super)
 '(ns-pop-up-frames 'fresh)
 '(ns-use-native-fullscreen nil)
 '(ns-use-thin-smoothing t t)
 '(org-agenda-files '("~/.emacs.d/emacs-todo.org"))
 '(org-ellipsis "  ")
 '(package-archive-priorities
   '(("melpa" . 10)
     ("melpa-stable" . 5)
     ("gnu" . 0)
     ("marmalade" . -5)))
 '(package-archives
   '(("melpa" . "https://melpa.org/packages/")
     ("melpa-stable" . "https://stable.melpa.org/packages/")
     ("org" . "http://orgmode.org/elpa/")
     ("gnu" . "http://elpa.gnu.org/packages/")))
 '(package-menu-hide-low-priority t)
 '(package-quickstart t)
 '(package-quickstart-file "/Users/Macnube/.emacs.d/cache/package-quickstart.el")
 '(package-selected-packages
   '(gruvbox-theme magithub magit lispy racket-mode macrostep darktooth-theme spacemacs-theme cider clojure-mode delight helm-dash pcre2el tide js2-mode intero ace-window wgrep which-key company-box zenburn-theme doom-themes helm smartparens yasnippet geiser osx-trash wgrep-ag wgrep-helm smart-jump helm-ls-git visual-regexp-steroids visual-regexp ag rg company company-quickhelp dumb-jump git-commit use-package persp-mode helm-descbinds helm-describe-modes helm-themes bind-key hydra page-break-lines all-the-icons visual-fill-column company-web rainbow-mode paradox expand-region web-mode f request-deferred deferred request shm haskell-mode diff-hl markdown-mode vmd-mode eyebrowse golden-ratio flycheck js-doc projectile smooth-scrolling elisp-slime-nav window-numbering shackle exec-path-from-shell avy))
 '(package-user-dir "/Users/Macnube/.emacs.d/elpa")
 '(paradox-column-width-package 30 t nil "Customized with use-package paradox")
 '(paradox-execute-asynchronously t t nil "Customized with use-package paradox")
 '(paradox-github-token t t nil "Customized with use-package paradox")
 '(paradox-lines-per-entry 1 t nil "Customized with use-package paradox")
 '(paradox-use-homepage-buttons nil t nil "Customized with use-package paradox")
 '(pdf-view-display-size 'fit-height)
 '(pdf-view-midnight-colors '("#DCDCCC" . "#383838"))
 '(pdf-view-use-imagemagick t)
 '(pdf-view-use-scaling t)
 '(persp-add-buffer-on-after-change-major-mode t t nil "Customized with use-package persp-mode")
 '(persp-auto-resume-time 0 t nil "Customized with use-package persp-mode")
 '(persp-auto-save-opt 1 t nil "Customized with use-package persp-mode")
 '(persp-autokill-buffer-on-remove nil t nil "Customized with use-package persp-mode")
 '(persp-init-frame-behaviour 'persp-ignore-wconf t nil "Customized with use-package persp-mode")
 '(persp-keymap-prefix "l" t nil "Customized with use-package persp-mode")
 '(persp-nil-name "Home" t nil "Customized with use-package persp-mode")
 '(persp-reset-windows-on-nil-window-conf t t nil "Customized with use-package persp-mode")
 '(persp-restrict-buffers-to-if-foreign-buffer nil t nil "Customized with use-package persp-mode")
 '(persp-save-dir "/Users/Macnube/.emacs.d/cache/persp-confs/" t nil "Customized with use-package persp-mode")
 '(persp-set-ido-hooks t t nil "Customized with use-package persp-mode")
 '(persp-set-last-persp-for-new-frames t t nil "Customized with use-package persp-mode")
 '(persp-switch-to-added-buffer nil t nil "Customized with use-package persp-mode")
 '(persp-switch-wrap t t nil "Customized with use-package persp-mode")
 '(pos-tip-background-color "#A6E22E" t)
 '(pos-tip-foreground-color "#272822" t)
 '(projectile-cache-file "/Users/Macnube/.emacs.d/cache/projectile.cache")
 '(projectile-completion-system 'helm)
 '(projectile-enable-caching t t nil "Customized with use-package projectile")
 '(projectile-indexing-method 'alien t nil "Customized with use-package projectile")
 '(projectile-known-projects-file "/Users/Macnube/.emacs.d/cache/projectile-bookmarks.eld")
 '(projectile-sort-order 'recentf)
 '(projectile-switch-project-action 'helm-projectile)
 '(rainbow-identifiers-choose-face-function 'rainbow-identifiers-cie-l*a*b*-choose-face)
 '(rainbow-identifiers-cie-l*a*b*-color-count 1024)
 '(rainbow-identifiers-cie-l*a*b*-lightness 80)
 '(rainbow-identifiers-cie-l*a*b*-saturation 25)
 '(recenter-positions '(top middle bottom))
 '(recentf-auto-cleanup 'never nil nil "Customized with use-package recentf")
 '(recentf-exclude '("~/.emacs.d/cache/.*") nil nil "Customized with use-package recentf")
 '(recentf-max-menu-items 10 nil nil "Customized with use-package recentf")
 '(recentf-max-saved-items 1000 nil nil "Customized with use-package recentf")
 '(recentf-save-file "~/.emacs.d/cache/recentf" nil nil "Customized with use-package recentf")
 '(rg-group-result t t nil "Customized with use-package rg")
 '(ring-bell-function 'ignore nil nil "Customized with use-package cus-edit")
 '(safe-local-variable-values '((eval progn (pp-buffer) (indent-buffer))))
 '(save-interprogram-paste-before-kill t nil nil "Customized with use-package simple")
 '(scroll-bar-mode nil)
 '(scroll-conservatively 101)
 '(scroll-margin 3)
 '(scroll-preserve-screen-position t)
 '(select-active-regions 'only)
 '(semantic-analyze-summary-function 'semantic-format-tag-short-doc t nil "Customized with use-package semantic")
 '(semantic-edits-verbose-flag nil nil nil "Customized with use-package semantic")
 '(semantic-elisp-store-documentation-in-tag nil nil nil "Customized with use-package semantic")
 '(semantic-idle-scheduler-idle-time 10 nil nil "Customized with use-package semantic")
 '(semantic-stickyfunc-indent-string " " nil nil "Customized with use-package semantic")
 '(semanticdb-default-save-directory "~/.emacs.d/cache/semanticdb" nil nil "Customized with use-package semantic")
 '(shackle-rules
   '(("*Process List*" :custom shackle-supporting-window :select t :align below :size 0.3)
     ("*Apropos*" :custom shackle-supporting-window :select t :align below :size 0.3)
     ("Outline.*pdf" :custom shackle-supporting-window :regexp t :select t :align below :size 0.3)
     ("*Geiser documentation*" :custom shackle-supporting-window :select t :align below :size 0.3)
     ("*slime-description*" :custom shackle-supporting-window :select t :align below :size 0.3)
     ("\\*[hH]elm.*\\*" :custom shackle-supporting-window :regexp t :align t :size 0.3)
     ("*Help*" :custom shackle-display-helm-help :select t :align below :size 0.3)
     ("^\\*helpful.*" :custom shackle-supporting-window :regexp t :select t :align below :size 0.3)
     ("*Completions*" :custom shackle-supporting-window :select t :align below :size 0.3)
     ("*Compile-Log*" :custom shackle-supporting-window :select t :align below :size 0.3)
     ("*lispy-goto*" :custom shackle-supporting-window :align t :size 0.3)
     ("*tide-documentation*" :custom shackle-supporting-window :select t :align below :size 0.3 :popup t)
     ("*lispy-help*" :custom shackle-supporting-window :select t :align below :size 0.3 :popup t)
     ("magit-process:.*" :custom shackle-supporting-window :regexp t :select t :align below :size 0.3 :popup t)
     ("^\\*\\(Wo\\)?Man.*" :custom shackle-supporting-window :regexp t :select t :align below :size 0.3 :popup t)
     ("^\\*xwidget.webkit:.*\\*" :regexp t :custom shackle-working-window :select t)
     ("*Pp Eval Output*" :custom shackle-working-window :select t)
     ("*Package Commit List*" :custom shackle-working-window :select t)
     (helm-grep-mode :custom shackle-working-window :select t)
     (ag-mode :custom shackle-working-window :select t)
     (rg-mode :custom shackle-working-window :select t)
     (dired-mode :custom shackle-working-window :select t)
     (helm-moccur-mode :custom shackle-working-window :select t)
     (xref--xref-buffer-mode :custom shackle-working-window :select t)
     (diff-mode :custom shackle-working-window :select t)
     (locate-mode :custom shackle-working-window :select t)))
 '(shackle-select-reused-windows t nil nil "Customized with use-package shackle")
 '(shell-file-name "/bin/zsh")
 '(show-paren-delay 0 nil nil "Customized with use-package paren")
 '(show-paren-mode t)
 '(slime-kill-without-query-p t)
 '(smart-jump-bind-keys nil t nil "Customized with use-package smart-jump")
 '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#073642" 0.2))
 '(sml/active-background-color "#34495e")
 '(sml/active-foreground-color "#ecf0f1")
 '(sml/inactive-background-color "#dfe4ea")
 '(sml/inactive-foreground-color "#34495e")
 '(solarized-bold t)
 '(solarized-broken-srbg t t)
 '(solarized-contrast 'normal)
 '(solarized-distinct-doc-face t)
 '(solarized-emphasize-indicators nil)
 '(solarized-high-contrast-mode-line nil)
 '(solarized-underline t)
 '(solarized-use-variable-pitch nil)
 '(sp-echo-match-when-invisible nil t nil "Customized with use-package smartparens")
 '(sp-show-pair-delay 0.01 t nil "Customized with use-package smartparens")
 '(sp-show-pair-from-inside nil)
 '(spacemacs-theme-org-height nil t)
 '(split-height-threshold 80 nil nil "Customized with use-package window")
 '(split-width-threshold 80 nil nil "Customized with use-package window")
 '(split-window-preferred-function 'split-window-sensibly nil nil "Customized with use-package window")
 '(standard-indent 2)
 '(tab-width 8)
 '(term-buffer-maximum-size 1024 t nil "Customized with use-package term")
 '(term-default-bg-color "#002b36")
 '(term-default-fg-color "#839496")
 '(term-suppress-hard-newline t t nil "Customized with use-package term")
 '(tool-bar-mode nil)
 '(tramp-auto-save-directory "~/.emacs.d/cache/auto-saves/")
 '(tramp-backup-directory-alist '((".*" . "~/.emacs.d/cache/backups/")))
 '(tramp-persistency-file-name "/Users/Macnube/.emacs.d/cache/tramp")
 '(use-dialog-box nil nil nil "Customized with use-package cus-edit")
 '(use-package-always-defer t t)
 '(use-package-expand-minimally nil t)
 '(use-package-minimum-reported-time 0.01 t)
 '(use-package-verbose nil t)
 '(user-full-name "Christopher McCloud")
 '(user-mail-address "mccloud.christopher@gmail.com")
 '(vc-annotate-background nil)
 '(vc-annotate-background-mode nil)
 '(vc-annotate-color-map
   '((20 . "#dc322f")
     (40 . "#cb4b16")
     (60 . "#b58900")
     (80 . "#859900")
     (100 . "#2aa198")
     (120 . "#268bd2")
     (140 . "#d33682")
     (160 . "#6c71c4")
     (180 . "#dc322f")
     (200 . "#cb4b16")
     (220 . "#b58900")
     (240 . "#859900")
     (260 . "#2aa198")
     (280 . "#268bd2")
     (300 . "#d33682")
     (320 . "#6c71c4")
     (340 . "#dc322f")
     (360 . "#cb4b16")))
 '(vc-annotate-very-old-color nil)
 '(visible-bell nil nil nil "Customized with use-package cus-edit")
 '(visible-cursor nil)
 '(vr/default-replace-preview nil t nil "Customized with use-package visual-regexp")
 '(vr/engine 'pcre2el nil nil "Customized with use-package visual-regexp-steroids")
 '(vr/match-separator-use-custom-face t t)
 '(web-mode-tests-directory "/Users/Macnube/.emacs.d/cache/tests/")
 '(wgrep-auto-save-buffer nil nil nil "Customized with use-package wgrep")
 '(wgrep-enable-key "" nil nil "Customized with use-package wgrep")
 '(which-key-enable-extended-define-key t nil nil "Customized with use-package which-key")
 '(which-key-min-display-lines 2 nil nil "Customized with use-package which-key")
 '(which-key-sort-order 'which-key-prefix-then-key-order-reverse nil nil "Customized with use-package which-key")
 '(whitespace-line-column 80 t nil "Customized with use-package whitespace")
 '(whitespace-style '(face lines-tail) t nil "Customized with use-package whitespace")
 '(window-combination-limit 'window-size nil nil "Customized with use-package window")
 '(window-combination-resize t nil nil "Customized with use-package window")
 '(window-divider-default-bottom-width 1 nil nil "Customized with use-package frame")
 '(window-divider-default-places 'right-only nil nil "Customized with use-package frame")
 '(window-divider-default-right-width 1 nil nil "Customized with use-package frame")
 '(winner-dont-bind-my-keys t nil nil "Customized with use-package winner")
 '(woman-cache-filename "~/.emacs.d/cache/.wmncache.el" t nil "Customized with use-package woman")
 '(woman-cache-level 3 t nil "Customized with use-package woman")
 '(woman-fill-frame t t nil "Customized with use-package woman")
 '(xref-marker-ring-length 200 nil nil "Customized with use-package xref")
 '(xref-show-xrefs-function 'helm-xref-show-xrefs t nil "Customized with use-package helm-xref")
 '(xterm-color-names
   ["#073642" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#eee8d5"])
 '(xterm-color-names-bright
   ["#002b36" "#cb4b16" "#586e75" "#657b83" "#839496" "#6c71c4" "#93a1a1" "#fdf6e3"]))


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :slant normal :weight normal :height 110 :width normal :foundry "nil" :family "Menlo"))))
 '(aw-leading-char-face ((t (:inherit t :height 1.3))))
 '(doom-modeline-inactive-bar ((t (:inherit mode-line-inactive))))
 '(helm-candidate-number ((t (:inherit bold :background nil))))
 '(helm-ls-git-added-copied-face ((t (:inherit diff-added))))
 '(helm-ls-git-added-modified-face ((t (:inherit diff-added))))
 '(helm-ls-git-conflict-face ((t (:inherit diff-refine-removed))))
 '(helm-ls-git-modified-not-staged-face ((t (:inherit diff-changed))))
 '(helm-ls-git-untracked-face ((t (:inherit diff-removed))))
 '(helm-match ((t (:inherit font-lock-keyword-face :weight bold))))
 '(helm-match-item ((t (:inherit helm-match :underline t))))
 '(helm-rg-preview-line-highlight ((t (:inherit helm-match-item))))
 '(helm-rg-preview-match-highlight ((t (:inherit helm-match))))
 '(persp-face-lighter-buffer-not-in-persp ((t (:inherit error))))
 '(persp-face-lighter-default ((t (:inherit default :weight bold))))
 '(persp-face-lighter-nil-persp ((t (:inherit default :weight bold))))
 '(vc-conflict-state ((t (:inherit (diff-changed vc-state-base)))))
 '(vc-edited-state ((t (:inherit (diff-changed vc-state-base)))))
 '(vc-locally-added-state ((t (:inherit (diff-changed vc-state-base)))))
 '(vc-missing-state ((t (:inherit (diff-changed vc-state-base)))))
 '(vc-needs-update-state ((t (:inherit (diff-changed vc-state-base)))))
 '(vc-removed-state ((t (:inherit (diff-changed vc-state-base)))))
 '(vc-state-base ((t (:weight bold))))
 '(vc-up-to-date-state ((t (:inherit (diff-added vc-state-base)))))
 '(wgrep-delete-face ((t (:inherit diff-removed))))
 '(wgrep-face ((t (:inherit diff-changed))))
 '(wgrep-file-face ((t (:inherit highlight)))))
;;; custom.el ends here
